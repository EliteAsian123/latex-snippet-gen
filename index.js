const selectionsParent = document.getElementById("selections");
let selectionState;

reset();
populateSelections();

function selectCommand(commandId, command) {
  selectionState[commandId] = {
    name: command.defaultName
  };
}

function reset() {
  selectionState = {};

  for (const commandId in COMMANDS) {
    const command = COMMANDS[commandId];

    if (command.defaultSelect) {
      selectCommand(commandId, command);
    }
  }
}

function populateSelections() {
  selectionsParent.innerHTML = "";

  const disabledCommands = [];

  const packagesTitle = getTemplate("selectionTitle");
  packagesTitle.querySelector(".label").replaceChildren(
    new Text("LaTeX Package Preferences"));
  packagesTitle.querySelector(".info").replaceChildren(
    new Text(`(${Object.keys(PACKAGES).length})`));
  selectionsParent.append(packagesTitle);

  for (const packageId in PACKAGES) {
    const package = PACKAGES[packageId];
    const template = getTemplate("selectionCheckbox");

    // Update label text
    const label = template.querySelector(".label");
    label.replaceChildren(new Text(package.title));

    // Update checkbox properties
    const checkbox = template.querySelector("input");
    checkbox.checked = packageId in selectionState;
    checkbox.addEventListener("change", function() {
      if (this.checked) {
        selectionState[packageId] = {};
      } else {
        delete selectionState[packageId];
      }
      populateSelections();
    });

    // Add to disabled commands
    if (packageId in selectionState) {
      for (const command of package.disableCommands) {
        disabledCommands.push(command);
      }
    }

    selectionsParent.append(template);
  }

  const commandsTitle = getTemplate("selectionTitle");
  commandsTitle.querySelector(".label").replaceChildren(
    new Text("LaTeX Commands"));
  commandsTitle.querySelector(".info").replaceChildren(
    new Text(`(${Object.keys(COMMANDS).length})`));
  selectionsParent.append(commandsTitle);

  for (const commandId in COMMANDS) {
    const command = COMMANDS[commandId];
    const template = getTemplate("selectionCheckbox");
    const disabled = disabledCommands.indexOf(commandId) != -1;

    // Update label text
    const label = template.querySelector(".label");
    label.replaceChildren(new Text(command.title));
    if (disabled) {
      label.classList.add("disabled");
    }

    // Update checkbox properties
    const checkbox = template.querySelector("input");
    checkbox.checked = commandId in selectionState;
    if (!disabled) {
      checkbox.addEventListener("change", function() {
        if (this.checked) {
          selectCommand(commandId, command);
        } else {
          delete selectionState[commandId];
        }
      });
    } else {
      checkbox.disabled = true;
    }

    selectionsParent.append(template);
  }
}

function getTemplate(templateId) {
  const template = document.getElementById(templateId);
  if (!(template instanceof HTMLTemplateElement)) {
    throw new Error(`${templateId} does not exist in the DOM`);
  }

  const container = template.content.firstElementChild?.cloneNode(true);
  if (!(container instanceof HTMLElement)) {
    throw new Error(`${templateId} container is not an HTML element`);
  }

  return container;
}

function exportSty() {
  let file = `\
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This file was generated by the LaTeX Snippet Generator %
%   https://eliteasian123.github.io/latex-snippet-gen/   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\\usepackage{xparse}
\\usepackage{amsmath}
`;

  let packageSection = "";
  let commandSection = "";

  for (const selectionId in selectionState) {
    const selection = selectionState[selectionId];

    if (selectionId in COMMANDS) {
      const command = COMMANDS[selectionId];

      commandSection += `\\NewDocumentCommand{\\${selection.name}}${command.definition}\n`;
    }
  }

  file += packageSection;
  file += "\n";
  file += commandSection;

  let blob = new Blob([file], { type: "text/plain;charset=utf-8" });
  saveAs(blob, "cmd.sty");
}
